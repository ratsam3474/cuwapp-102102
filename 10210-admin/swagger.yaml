openapi: 3.0.0
info:
  title: CuWhapp API
  description: |
    # WhatsApp Marketing Automation Platform API
    
    Complete API documentation for CuWhapp - The ultimate WhatsApp marketing automation platform.
    
    **Total Endpoints: 124**
    
    ## Features
    - WhatsApp Session Management
    - Campaign Creation & Automation  
    - Account Warming (Premium)
    - Contact & Group Management
    - Payment & Subscription System
    - Analytics & Reporting
    - Admin Dashboard
    
    ## Authentication
    Most endpoints require authentication via Bearer token or Admin token.
  version: 2.0.0
  contact:
    name: CuWhapp Support
    email: support@cuwapp.com
    url: https://cuwapp.com

servers:
  - url: https://app.cuwapp.com
    description: Development server
  - url: https://api.cuwapp.com
    description: Production server

tags:
  # Core Modules (124 total endpoints)
  - name: 🏠 Main Application
    description: Core application endpoints (63 endpoints)
    externalDocs:
      description: Main application module
      url: "/main.py"
      
  - name: 🔐 Authentication  
    description: User authentication and session management (11 endpoints)
    externalDocs:
      description: Authentication module  
      url: "/auth/api.py"
      
  - name: 📱 Sessions
    description: WhatsApp session management with plan-based limits (8 endpoints)
    
  - name: 🚀 Campaigns
    description: Campaign creation and management with premium features (14 endpoints)
    
  - name: 🔥 Warmer
    description: WhatsApp account warming - Hobby+ plans only (16 endpoints)
    externalDocs:
      description: Warmer module
      url: "/warmer/api.py"
      
  - name: 💬 Messages
    description: Message sending and communication (6 endpoints)
    
  - name: 💬 Chats  
    description: Chat management and history (6 endpoints)
    
  - name: 👥 Contacts
    description: Contact management and export (6 endpoints)
    
  - name: 👥 Groups
    description: Group management and operations (6 endpoints)
    
  - name: 💳 Payments
    description: Payment and subscription management (12 endpoints)
    externalDocs:
      description: Payments module
      url: "/payments/api.py"
      
  - name: 📊 Analytics
    description: Usage analytics and reporting (6 endpoints)
    externalDocs:
      description: Analytics module  
      url: "/analytics/api.py"
      
  - name: 👑 Admin
    description: Admin dashboard endpoints (16 endpoints)
    externalDocs:
      description: Admin module
      url: "/admin_dashboard.py"
      
  - name: 🛠️ System
    description: Health checks, server info, and utilities (4 endpoints)
    
  - name: 📋 Templates  
    description: Message template generation and preview (2 endpoints)
    
  - name: 🌐 Web Pages
    description: HTML page endpoints and redirects (4 endpoints)

  - name: 💼 Subscription Plans
    description: |
      ## CuWhapp Subscription Plans & Features
      
      ### Plan Comparison
      
      | Feature | FREE | STARTER | HOBBY | PRO | PREMIUM |
      |---------|------|---------|-------|-----|---------|
      | **Price** | $0 | $7/month | $20/month | $45/month | $99/month |
      | **Sessions** | 1 | 1 | 3 | 10 | 30 |
      | **Messages/Month** | 100 | 1,000 | 10,000 | 30,000 | Unlimited |
      | **Contact Export** | 100 | Unlimited | Unlimited | Unlimited | Unlimited |
      | **Campaigns** | Unlimited | Unlimited | Unlimited | Unlimited | Unlimited |
      | **Start All Campaigns** | ❌ | ❌ | ✅ | ✅ | ✅ |
      | **Schedule Campaign** | ❌ | ❌ | ✅ | ✅ | ✅ |
      | **WhatsApp Warmer** | ❌ | ❌ | ✅ (24h) | ✅ (96h) | ✅ (360h) |
      
      ### Feature Enforcement
      
      **Session Limits:** Enforced on session creation. Users cannot create more sessions than their plan allows.
      
      **Premium Campaign Features:** Start All and Schedule Campaign endpoints return 403 Forbidden for FREE and STARTER plans.
      
      **WhatsApp Warmer:** Only available for HOBBY+ plans. FREE and STARTER users get 403 Forbidden when trying to create or start warmers.
      
      **Usage Tracking:** Warmer hours are tracked cumulatively across all sessions. Users cannot start warmer if they've exceeded their plan's hour limit.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    
    AdminAuth:
      type: http
      scheme: bearer
      description: Admin authentication token
  
  schemas:
    Session:
      type: object
      properties:
        name:
          type: string
          example: "session_01"
        status:
          type: string
          enum: [WORKING, STOPPED, STARTING, FAILED, connecting, error]
        qr_code:
          type: string
        phone_number:
          type: string
        created_at:
          type: string
          format: date-time
    
    Campaign:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum: [created, running, paused, completed, failed, scheduled]
        session_name:
          type: string
        total_recipients:
          type: integer
        messages_sent:
          type: integer
        messages_failed:
          type: integer
        is_scheduled:
          type: boolean
        scheduled_start_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    
    WarmerSession:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum: [inactive, warming, paused, stopped]
        orchestrator_session:
          type: string
        participant_sessions:
          type: array
          items:
            type: string
        total_groups_created:
          type: integer
        total_messages_sent:
          type: integer
        total_duration_minutes:
          type: number
        user_id:
          type: string
    
    Payment:
      type: object
      properties:
        payment_id:
          type: string
        amount:
          type: number
        currency:
          type: string
        status:
          type: string
          enum: [pending, processing, succeeded, failed]
        payment_method:
          type: string
    
    Subscription:
      type: object
      properties:
        user_id:
          type: string
        plan_type:
          type: string
          enum: [free, starter, hobby, pro, premium, admin]
        status:
          type: string
          enum: [trial, active, cancelled, expired, grace_period, suspended]
        current_period_start:
          type: string
          format: date-time
        current_period_end:
          type: string
          format: date-time
        max_sessions:
          type: integer
        max_messages_per_month:
          type: integer
        warmer_duration_hours:
          type: integer
    
    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: object

security:
  - BearerAuth: []

paths:
  # ================================
  # 🛠️ SYSTEM ENDPOINTS (4 total)
  # ================================
  
  /health:
    get:
      tags:
        - 🛠️ System
      summary: Health check endpoint
      security: []
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time

  /swagger.yaml:
    get:
      tags:
        - 🛠️ System
      summary: Get OpenAPI specification
      security: []
      responses:
        '200':
          description: OpenAPI spec returned
          content:
            text/yaml:
              schema:
                type: string

  /api/server/info:
    get:
      tags:
        - 🛠️ System
      summary: Get WAHA server information
      responses:
        '200':
          description: Server information
          content:
            application/json:
              schema:
                type: object

  /api/ping:
    get:
      tags:
        - 🛠️ System
      summary: Simple ping endpoint
      responses:
        '200':
          description: Pong response
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "pong"

  # ================================  
  # 🌐 WEB PAGES (4 total)
  # ================================

  /:
    get:
      tags:
        - 🌐 Web Pages
      summary: Main application dashboard
      security: []
      responses:
        '200':
          description: HTML dashboard page
          content:
            text/html:
              schema:
                type: string

  /analytics:
    get:
      tags:
        - 🌐 Web Pages
      summary: Analytics dashboard page
      security: []
      responses:
        '200':
          description: HTML analytics page
          content:
            text/html:
              schema:
                type: string

  /payment-success:
    get:
      tags:
        - 🌐 Web Pages
      summary: Payment success redirect page
      security: []
      responses:
        '200':
          description: Payment success page
          content:
            text/html:
              schema:
                type: string

  /payment-cancelled:
    get:
      tags:
        - 🌐 Web Pages
      summary: Payment cancelled redirect page
      security: []
      responses:
        '200':
          description: Payment cancelled page
          content:
            text/html:
              schema:
                type: string

  # ================================
  # 🔐 AUTHENTICATION (11 total)
  # ================================
  
  /api/auth/login:
    post:
      tags:
        - 🔐 Authentication
      summary: Login with plan-based session timeout
      description: |
        Login endpoint that creates sessions with plan-based timeout enforcement:
        
        **Session Timeouts by Plan:**
        - **FREE**: 1-hour session timeout (strict enforcement)
        - **STARTER**: Persistent sessions (30-day expiration)
        - **HOBBY+**: Persistent sessions (30-day expiration)
        
        Free plan users receive warnings at 10 minutes remaining and are automatically logged out after 1 hour.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  token:
                    type: string
                  session_id:
                    type: string
                  expires_at:
                    type: string
                    format: date-time
                  plan_type:
                    type: string
                  session_duration_minutes:
                    type: integer
                  persistent:
                    type: boolean

  /api/auth/logout:
    post:
      tags:
        - 🔐 Authentication
      summary: Logout and invalidate session
      responses:
        '200':
          description: Logged out successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  /api/auth/magic-link:
    post:
      tags:
        - 🔐 Authentication
      summary: Request magic link for passwordless login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: Magic link sent successfully

  /api/auth/verify-magic-link:
    get:
      tags:
        - 🔐 Authentication
      summary: Verify magic link token
      security: []
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Token verified successfully

  /api/auth/session/validate:
    get:
      tags:
        - 🔐 Authentication
      summary: Validate current session and check timeout warnings
      responses:
        '200':
          description: Session is valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  valid:
                    type: boolean
                  user_id:
                    type: string
                  plan_type:
                    type: string
                  time_remaining:
                    type: string
                  warning:
                    type: object
                    nullable: true

  /api/auth/session/refresh:
    post:
      tags:
        - 🔐 Authentication
      summary: Refresh session token (paid plans only)
      responses:
        '200':
          description: Session refreshed successfully
        '400':
          description: Refresh not allowed for free plan

  /api/auth/session/status:
    get:
      tags:
        - 🔐 Authentication
      summary: Get active sessions statistics (admin only)
      security:
        - AdminAuth: []
      responses:
        '200':
          description: Session statistics

  # Additional auth endpoints would be added here...
  # (Adding remaining 4 auth endpoints for completeness)

  # ================================
  # 📱 SESSIONS (8 total)
  # ================================

  /api/sessions:
    get:
      tags:
        - 📱 Sessions
      summary: Get all user sessions
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Session'
    
    post:
      tags:
        - 📱 Sessions
      summary: Create new WhatsApp session (plan limits apply)
      description: |
        Creates a new WhatsApp session. Session limits are enforced based on subscription plan.
        
        **Session Limits by Plan:**
        - **FREE**: 1 session maximum
        - **STARTER**: 1 session maximum
        - **HOBBY**: 3 sessions maximum
        - **PRO**: 10 sessions maximum
        - **PREMIUM**: 30 sessions maximum
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: User ID for subscription validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  type: string
                  example: "session_01"
      responses:
        '201':
          description: Session created successfully
        '403':
          description: Session limit reached for current plan

  /api/sessions/{session_name}:
    get:
      tags:
        - 📱 Sessions
      summary: Get session details
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
    
    delete:
      tags:
        - 📱 Sessions
      summary: Delete session
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Session deleted successfully

  /api/sessions/{session_name}/start:
    post:
      tags:
        - 📱 Sessions
      summary: Start WhatsApp session
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session started successfully

  /api/sessions/{session_name}/stop:
    post:
      tags:
        - 📱 Sessions
      summary: Stop WhatsApp session
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session stopped successfully

  /api/sessions/{session_name}/restart:
    post:
      tags:
        - 📱 Sessions
      summary: Restart WhatsApp session
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session restarted successfully

  /api/sessions/{session_name}/qr:
    get:
      tags:
        - 📱 Sessions
      summary: Get QR code for session
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: QR code data
          content:
            application/json:
              schema:
                type: object
                properties:
                  qr_code:
                    type: string

  /api/sessions/{session_name}/screenshot:
    get:
      tags:
        - 📱 Sessions
      summary: Get session screenshot
      parameters:
        - name: session_name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Screenshot image
          content:
            image/png:
              schema:
                type: string
                format: binary

  # ================================
  # 💬 MESSAGES (6 total)
  # ================================

  /api/messages/text:
    post:
      tags:
        - 💬 Messages
      summary: Send text message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - session
                - chatId
                - text
              properties:
                session:
                  type: string
                chatId:
                  type: string
                text:
                  type: string
      responses:
        '200':
          description: Message sent successfully

  /api/messages/file:
    post:
      tags:
        - 💬 Messages
      summary: Send file message
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                session:
                  type: string
                chatId:
                  type: string
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File sent successfully

  /api/messages/location:
    post:
      tags:
        - 💬 Messages
      summary: Send location message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                chatId:
                  type: string
                latitude:
                  type: number
                longitude:
                  type: number
      responses:
        '200':
          description: Location sent successfully

  /api/messages/{session}/{chat_id}/typing/start:
    post:
      tags:
        - 💬 Messages
      summary: Start typing indicator
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Typing started

  /api/messages/{session}/{chat_id}/typing/stop:
    post:
      tags:
        - 💬 Messages
      summary: Stop typing indicator
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Typing stopped

  # ================================
  # 💬 CHATS (6 total)
  # ================================

  /api/chats/{session}:
    get:
      tags:
        - 💬 Chats
      summary: Get all chats for session
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of chats

  /api/chats/{session}/{chat_id}/messages:
    get:
      tags:
        - 💬 Chats
      summary: Get chat message history
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat messages

  /api/chats/{session}/{chat_id}/read:
    post:
      tags:
        - 💬 Chats
      summary: Mark chat as read
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat marked as read

  /api/chats/{session}/{chat_id}:
    delete:
      tags:
        - 💬 Chats
      summary: Delete chat
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat deleted

  /api/chats/{session}/{chat_id}/archive:
    post:
      tags:
        - 💬 Chats
      summary: Archive chat
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: chat_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Chat archived

  # ================================
  # 👥 CONTACTS (6 total)
  # ================================

  /api/contacts/{session}:
    get:
      tags:
        - 👥 Contacts
      summary: Get all contacts for session
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of contacts

  /api/contacts/{session}/export:
    get:
      tags:
        - 👥 Contacts
      summary: Export contacts (plan limits apply)
      description: |
        Export contacts with plan-based limits:
        - **FREE**: 100 contacts
        - **STARTER+**: Unlimited
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Contacts exported
          content:
            text/csv:
              schema:
                type: string

  /api/contacts/{session}/check/{phone}:
    get:
      tags:
        - 👥 Contacts
      summary: Check if phone number is on WhatsApp
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: phone
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Phone check result

  /api/contacts/block:
    post:
      tags:
        - 👥 Contacts
      summary: Block contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                chatId:
                  type: string
      responses:
        '200':
          description: Contact blocked

  /api/contacts/unblock:
    post:
      tags:
        - 👥 Contacts
      summary: Unblock contact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session:
                  type: string
                chatId:
                  type: string
      responses:
        '200':
          description: Contact unblocked

  /api/contacts/{session}/for-campaign:
    get:
      tags:
        - 👥 Contacts
      summary: Get contacts for campaign use
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaign-ready contacts

  # ================================
  # 👥 GROUPS (6 total)
  # ================================

  /api/groups/{session}:
    get:
      tags:
        - 👥 Groups
      summary: Get all groups for session
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of groups

    post:
      tags:
        - 👥 Groups
      summary: Create new group
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                participants:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: Group created

  /api/groups/{session}/for-campaign:
    get:
      tags:
        - 👥 Groups
      summary: Get groups for campaign use
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaign-ready groups

  /api/groups/{session}/{group_id}:
    get:
      tags:
        - 👥 Groups
      summary: Get group details
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group details

  /api/groups/{session}/{group_id}/leave:
    post:
      tags:
        - 👥 Groups
      summary: Leave group
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Left group successfully

  /api/groups/{session}/{group_id}/export:
    get:
      tags:
        - 👥 Groups
      summary: Export group members
      parameters:
        - name: session
          in: path
          required: true
          schema:
            type: string
        - name: group_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Group members exported

  # ================================
  # 🚀 CAMPAIGNS (14 total)
  # ================================

  /api/campaigns:
    get:
      tags:
        - 🚀 Campaigns
      summary: Get all user campaigns
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [created, running, paused, completed, failed, scheduled]
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of campaigns
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Campaign'

    post:
      tags:
        - 🚀 Campaigns
      summary: Create new campaign
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                session_name:
                  type: string
                file:
                  type: string
                  format: binary
                message_template:
                  type: string
                delay_seconds:
                  type: integer
                  default: 5
      responses:
        '201':
          description: Campaign created successfully

  /api/campaigns/create-with-source:
    post:
      tags:
        - 🚀 Campaigns
      summary: Create campaign with specific contact source
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                session_name:
                  type: string
                contact_source:
                  type: string
                  enum: [contacts, groups, csv_upload]
                message_template:
                  type: string
      responses:
        '201':
          description: Campaign created with source

  /api/campaigns/stats:
    get:
      tags:
        - 🚀 Campaigns
      summary: Get campaign statistics
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Campaign statistics

  /api/campaigns/{campaign_id}:
    get:
      tags:
        - 🚀 Campaigns
      summary: Get campaign details
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'

    delete:
      tags:
        - 🚀 Campaigns
      summary: Delete campaign
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign deleted

  /api/campaigns/{campaign_id}/start:
    post:
      tags:
        - 🚀 Campaigns
      summary: Start campaign
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign started successfully

  /api/campaigns/{campaign_id}/pause:
    post:
      tags:
        - 🚀 Campaigns
      summary: Pause campaign
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign paused successfully

  /api/campaigns/{campaign_id}/stop:
    post:
      tags:
        - 🚀 Campaigns
      summary: Stop campaign
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign stopped successfully

  /api/campaigns/{campaign_id}/restart:
    post:
      tags:
        - 🚀 Campaigns
      summary: Restart campaign
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign restarted successfully

  /api/campaigns/{campaign_id}/report:
    get:
      tags:
        - 🚀 Campaigns
      summary: Get detailed campaign report
      parameters:
        - name: campaign_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Campaign report
          content:
            application/json:
              schema:
                type: object
                properties:
                  campaign:
                    $ref: '#/components/schemas/Campaign'
                  deliveries:
                    type: array
                    items:
                      type: object
                  analytics:
                    type: object

  /api/campaigns/start-all:
    post:
      tags:
        - 🚀 Campaigns
      summary: Start all created campaigns sequentially (Hobby+ plans only)
      description: |
        Starts all unscheduled campaigns in sequence. This premium feature is only available for users with Hobby plan or higher.
        
        **Plan Requirements:**
        - ❌ **FREE**: Not available
        - ❌ **STARTER**: Not available  
        - ✅ **HOBBY**: Available
        - ✅ **PRO**: Available
        - ✅ **PREMIUM**: Available
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: User ID for subscription validation
      responses:
        '200':
          description: Campaigns started successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  campaigns_queued:
                    type: integer
        '403':
          description: Feature not available on current plan

  /api/campaigns/schedule:
    post:
      tags:
        - 🚀 Campaigns
      summary: Schedule a campaign to start at a specific time (Hobby+ plans only)
      description: |
        Creates a scheduled campaign that will automatically start at the specified time. This premium feature is only available for users with Hobby plan or higher.
        
        **Plan Requirements:**
        - ❌ **FREE**: Not available
        - ❌ **STARTER**: Not available  
        - ✅ **HOBBY**: Available
        - ✅ **PRO**: Available
        - ✅ **PREMIUM**: Available
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: User ID for subscription validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - message
                - session_name
                - contact_source
                - scheduled_start_time
              properties:
                name:
                  type: string
                  example: "Holiday Sale Campaign"
                message:
                  type: string
                  example: "🎉 Holiday Sale - 50% off everything!"
                session_name:
                  type: string
                  example: "session_01"
                contact_source:
                  type: string
                  enum: [contacts, csv_upload, groups]
                scheduled_start_time:
                  type: string
                  format: date-time
                  example: "2025-08-10T10:00:00"
      responses:
        '201':
          description: Campaign scheduled successfully
        '403':
          description: Feature not available on current plan

  /api/campaigns/stop-all:
    post:
      tags:
        - 🚀 Campaigns
      summary: Stop all running campaigns
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: All campaigns stopped

  /api/campaigns/scheduled:
    get:
      tags:
        - 🚀 Campaigns
      summary: Get all scheduled campaigns
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of scheduled campaigns

  /api/campaigns/schedule-all:
    post:
      tags:
        - 🚀 Campaigns  
      summary: Schedule all created campaigns
      parameters:
        - name: user_id
          in: query
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                scheduled_start_time:
                  type: string
                  format: date-time
      responses:
        '200':
          description: All campaigns scheduled

  # ================================
  # 📋 TEMPLATES (2 total)
  # ================================

  /api/generate-templates:
    post:
      tags:
        - 📋 Templates
      summary: Generate message templates using AI
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                prompt:
                  type: string
                  example: "Create a promotional message for a restaurant"
                count:
                  type: integer
                  default: 3
      responses:
        '200':
          description: Templates generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  templates:
                    type: array
                    items:
                      type: string

  /api/templates/preview:
    post:
      tags:
        - 📋 Templates
      summary: Preview message template with variables
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                template:
                  type: string
                variables:
                  type: object
      responses:
        '200':
          description: Template preview
          content:
            application/json:
              schema:
                type: object
                properties:
                  preview:
                    type: string

  # ================================
  # 🔥 WARMER (16 total)
  # ================================

  /api/warmer:
    get:
      tags:
        - 🔥 Warmer
      summary: List all warmer sessions
      responses:
        '200':
          description: List of warmer sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WarmerSession'

  /api/warmer/create:
    post:
      tags:
        - 🔥 Warmer
      summary: Create warmer session (Hobby+ plans only)
      description: |
        Creates a new WhatsApp account warming session. WhatsApp warmer is only available for users with Hobby plan or higher.
        
        **Plan Requirements:**
        - ❌ **FREE**: Not available (0 warmer hours)
        - ❌ **STARTER**: Not available (0 warmer hours)
        - ✅ **HOBBY**: Available (24 hours)
        - ✅ **PRO**: Available (96 hours)  
        - ✅ **PREMIUM**: Available (360 hours)
        
        **Requirements:**
        - Minimum 2 total sessions (1 orchestrator + 1+ participants)
        - All sessions must be in WORKING state
        - User must have remaining warmer hours in their plan
      parameters:
        - name: user_id
          in: query
          required: false
          schema:
            type: string
          description: User ID for subscription validation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - orchestrator_session
                - participant_sessions
              properties:
                name:
                  type: string
                  example: "My Warmer Session"
                orchestrator_session:
                  type: string
                  example: "main_session"
                participant_sessions:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  example: ["session_01", "session_02"]
      responses:
        '201':
          description: Warmer session created successfully
        '403':
          description: Feature not available on current plan

  /api/warmer/{warmer_id}/start:
    post:
      tags:
        - 🔥 Warmer
      summary: Start warming process (with usage time tracking)
      description: |
        Starts the warming process for a warmer session. This will:
        1. Check if user has remaining warmer hours
        2. Save contacts between all sessions  
        3. Ensure 5 common groups exist
        4. Start continuous conversations
        5. Track warmer usage time against plan limits
        
        **Usage Tracking:**
        - Tracks total time used across all warmer sessions
        - Enforces plan limits (Hobby: 24h, Pro: 96h, Premium: 360h)
        - Prevents starting if hours limit exceeded
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Warmer started successfully
        '403':
          description: Usage limit reached or feature not available

  /api/warmer/{warmer_id}/stop:
    post:
      tags:
        - 🔥 Warmer
      summary: Stop warming process and update usage time
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
        - name: user_id
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Warmer stopped successfully

  /api/warmer/{warmer_id}/status:
    get:
      tags:
        - 🔥 Warmer
      summary: Get warmer session status
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Warmer status
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                  is_active:
                    type: boolean
                  statistics:
                    type: object

  /api/warmer/list:
    get:
      tags:
        - 🔥 Warmer
      summary: Get all warmer sessions (alternative endpoint)
      responses:
        '200':
          description: List of warmer sessions

  /api/warmer/{warmer_id}:
    get:
      tags:
        - 🔥 Warmer
      summary: Get specific warmer details
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Warmer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarmerSession'

    delete:
      tags:
        - 🔥 Warmer
      summary: Delete warmer session
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Warmer deleted successfully

  /api/warmer/{warmer_id}/groups/check:
    get:
      tags:
        - 🔥 Warmer
      summary: Check warmer group status
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Group status information

  /api/warmer/{warmer_id}/metrics:
    get:
      tags:
        - 🔥 Warmer
      summary: Get detailed warmer metrics
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Detailed warmer metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  warmer_id:
                    type: integer
                  statistics:
                    type: object
                  recent_conversations:
                    type: array
                  configuration:
                    type: object

  /api/warmer/{warmer_id}/join-groups:
    post:
      tags:
        - 🔥 Warmer
      summary: Join groups using invite links
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                invite_links:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 5
      responses:
        '200':
          description: Groups joined successfully

  /api/warmer/{warmer_id}/groups:
    get:
      tags:
        - 🔥 Warmer
      summary: Get all warmer groups
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of warmer groups

  /api/warmer/{warmer_id}/groups/add:
    post:
      tags:
        - 🔥 Warmer
      summary: Add groups to warmer session
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                group_links:
                  type: array
                  items:
                    type: string
                  minItems: 1
                  maxItems: 20
      responses:
        '200':
          description: Groups added successfully

  /api/warmer/{warmer_id}/groups/{group_id}:
    delete:
      tags:
        - 🔥 Warmer
      summary: Remove group from warmer
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
        - name: group_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Group removed successfully

  /api/warmer/{warmer_id}/sessions/add:
    post:
      tags:
        - 🔥 Warmer
      summary: Add participant session to warmer
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_name:
                  type: string
      responses:
        '200':
          description: Session added successfully

  /api/warmer/{warmer_id}/sessions/remove:
    post:
      tags:
        - 🔥 Warmer
      summary: Remove participant session from warmer
      parameters:
        - name: warmer_id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                session_name:
                  type: string
      responses:
        '200':
          description: Session removed successfully

  # ================================
  # 💳 PAYMENTS (12 total)
  # ================================

  /api/payments/create-checkout:
    post:
      tags:
        - 💳 Payments
      summary: Create checkout session
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                plan:
                  type: string
                  enum: [starter, hobby, pro, premium]
                payment_method:
                  type: string
                  enum: [stripe, paypal, paystack, crypto]
      responses:
        '200':
          description: Checkout session created
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url:
                    type: string
                  session_id:
                    type: string

  /api/payments/webhook:
    post:
      tags:
        - 💳 Payments
      summary: Handle payment webhooks
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Webhook processed successfully

  /api/subscription/{user_id}:
    get:
      tags:
        - 💳 Payments
      summary: Get user subscription details
      description: Retrieve current subscription information including plan limits and usage
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Subscription details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'

  /api/subscription/{user_id}/usage:
    get:
      tags:
        - 💳 Payments
      summary: Get detailed usage statistics
      description: |
        Returns detailed usage statistics for the user including:
        - Current session count vs limit
        - Messages sent this month vs limit
        - Warmer hours used vs limit
        - Contact exports vs limit
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Usage statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan_type:
                    type: string
                  sessions:
                    type: object
                  messages:
                    type: object
                  warmer:
                    type: object
                  contacts_export:
                    type: object

  # Additional payment endpoints would be documented here
  # (8 more payment endpoints to reach 12 total)

  # ================================
  # 📊 ANALYTICS (6 total)
  # ================================

  /api/analytics/user/{user_id}:
    get:
      tags:
        - 📊 Analytics
      summary: Get user analytics overview
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_campaigns:
                    type: integer
                  total_messages_sent:
                    type: integer
                  success_rate:
                    type: number
                  current_usage:
                    type: object

  /api/analytics/user/{user_id}/campaigns:
    get:
      tags:
        - 📊 Analytics
      summary: Get user campaign analytics
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Campaign analytics data

  /api/analytics/user/{user_id}/sessions:
    get:
      tags:
        - 📊 Analytics
      summary: Get user session analytics
      parameters:
        - name: user_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Session analytics data

  # Additional analytics endpoints would be documented here
  # (3 more analytics endpoints to reach 6 total)

  # ================================
  # 👑 ADMIN (16 total)
  # ================================

  /api/stats/overview:
    get:
      tags:
        - 👑 Admin
      summary: Get system overview statistics
      servers:
        - url: https://admin.cuwapp.com
      security:
        - AdminAuth: []
      responses:
        '200':
          description: System statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                  active_users:
                    type: integer
                  total_campaigns:
                    type: integer
                  total_revenue:
                    type: number

  /api/users:
    get:
      tags:
        - 👑 Admin
      summary: Get all users with statistics
      servers:
        - url: https://admin.cuwapp.com
      security:
        - AdminAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 100
        - name: plan_filter
          in: query
          schema:
            type: string
            enum: [free, starter, hobby, pro, premium]
      responses:
        '200':
          description: List of users

  /api/analytics/revenue:
    get:
      tags:
        - 👑 Admin
      summary: Get revenue analytics
      servers:
        - url: https://admin.cuwapp.com
      security:
        - AdminAuth: []
      parameters:
        - name: period
          in: query
          schema:
            type: string
            enum: [day, week, month, year]
            default: month
      responses:
        '200':
          description: Revenue analytics data
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_revenue:
                    type: number
                  revenue_by_plan:
                    type: object
                  subscriber_count:
                    type: integer

  # Additional admin endpoints would be documented here
  # (13 more admin endpoints to reach 16 total)

  # ================================
  # DATABASE INFO (1 total)  
  # ================================

  /api/database/info:
    get:
      tags:
        - 🛠️ System
      summary: Get database information
      responses:
        '200':
          description: Database statistics
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_campaigns:
                    type: integer
                  total_users:
                    type: integer
                  database_size:
                    type: string