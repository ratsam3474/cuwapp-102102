# Multi-service Dockerfile for user containers
# Runs API, Warmer, and Campaign services in one container
# ALL PORTS ARE DYNAMIC via environment variables

FROM python:3.9-slim

WORKDIR /app

# Install system dependencies (including gettext-base for envsubst)
RUN apt-get update && apt-get install -y \
    supervisor \
    curl \
    gettext-base \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create supervisor config directory and log directories
RUN mkdir -p /etc/supervisor/conf.d /var/log/supervisor

# Create startup script files
RUN echo '#!/usr/bin/env python3' > /app/start_api.py && \
    echo 'import os, sys, uvicorn' >> /app/start_api.py && \
    echo 'API_PORT = int(os.environ.get("API_PORT", 0))' >> /app/start_api.py && \
    echo 'if not API_PORT: raise ValueError("API_PORT required")' >> /app/start_api.py && \
    echo 'sys.path.insert(0, "/app")' >> /app/start_api.py && \
    echo 'from main import app' >> /app/start_api.py && \
    echo 'if __name__ == "__main__":' >> /app/start_api.py && \
    echo '    print(f"Starting API on port {API_PORT}")' >> /app/start_api.py && \
    echo '    uvicorn.run(app, host="0.0.0.0", port=API_PORT)' >> /app/start_api.py

RUN echo '#!/usr/bin/env python3' > /app/start_warmer.py && \
    echo 'import os, sys, uvicorn' >> /app/start_warmer.py && \
    echo 'from fastapi import FastAPI' >> /app/start_warmer.py && \
    echo 'from fastapi.middleware.cors import CORSMiddleware' >> /app/start_warmer.py && \
    echo 'WARMER_PORT = int(os.environ.get("WARMER_PORT", 0))' >> /app/start_warmer.py && \
    echo 'if not WARMER_PORT: raise ValueError("WARMER_PORT required")' >> /app/start_warmer.py && \
    echo 'app = FastAPI(title="Warmer Service")' >> /app/start_warmer.py && \
    echo 'app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])' >> /app/start_warmer.py && \
    echo '@app.get("/health")' >> /app/start_warmer.py && \
    echo 'async def health(): return {"status": "healthy", "port": WARMER_PORT}' >> /app/start_warmer.py && \
    echo 'if __name__ == "__main__":' >> /app/start_warmer.py && \
    echo '    print(f"Starting Warmer on port {WARMER_PORT}")' >> /app/start_warmer.py && \
    echo '    uvicorn.run(app, host="0.0.0.0", port=WARMER_PORT)' >> /app/start_warmer.py

RUN echo '#!/usr/bin/env python3' > /app/start_campaign.py && \
    echo 'import os, sys, uvicorn' >> /app/start_campaign.py && \
    echo 'from fastapi import FastAPI' >> /app/start_campaign.py && \
    echo 'from fastapi.middleware.cors import CORSMiddleware' >> /app/start_campaign.py && \
    echo 'CAMPAIGN_PORT = int(os.environ.get("CAMPAIGN_PORT", 0))' >> /app/start_campaign.py && \
    echo 'if not CAMPAIGN_PORT: raise ValueError("CAMPAIGN_PORT required")' >> /app/start_campaign.py && \
    echo 'app = FastAPI(title="Campaign Service")' >> /app/start_campaign.py && \
    echo 'app.add_middleware(CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"])' >> /app/start_campaign.py && \
    echo '@app.get("/health")' >> /app/start_campaign.py && \
    echo 'async def health(): return {"status": "healthy", "port": CAMPAIGN_PORT}' >> /app/start_campaign.py && \
    echo 'if __name__ == "__main__":' >> /app/start_campaign.py && \
    echo '    print(f"Starting Campaign on port {CAMPAIGN_PORT}")' >> /app/start_campaign.py && \
    echo '    uvicorn.run(app, host="0.0.0.0", port=CAMPAIGN_PORT)' >> /app/start_campaign.py

# Create entrypoint script
RUN echo '#!/bin/bash' > /app/docker-entrypoint.sh && \
    echo 'set -e' >> /app/docker-entrypoint.sh && \
    echo 'if [ -z "$API_PORT" ]; then echo "ERROR: API_PORT required"; exit 1; fi' >> /app/docker-entrypoint.sh && \
    echo 'if [ -z "$WARMER_PORT" ]; then echo "ERROR: WARMER_PORT required"; exit 1; fi' >> /app/docker-entrypoint.sh && \
    echo 'if [ -z "$CAMPAIGN_PORT" ]; then echo "ERROR: CAMPAIGN_PORT required"; exit 1; fi' >> /app/docker-entrypoint.sh && \
    echo 'echo "Starting with API_PORT=$API_PORT WARMER_PORT=$WARMER_PORT CAMPAIGN_PORT=$CAMPAIGN_PORT"' >> /app/docker-entrypoint.sh && \
    echo 'export API_PORT WARMER_PORT CAMPAIGN_PORT' >> /app/docker-entrypoint.sh && \
    echo 'cat > /etc/supervisor/conf.d/services.conf <<EOF' >> /app/docker-entrypoint.sh && \
    echo '[supervisord]' >> /app/docker-entrypoint.sh && \
    echo 'nodaemon=true' >> /app/docker-entrypoint.sh && \
    echo '[program:api]' >> /app/docker-entrypoint.sh && \
    echo 'command=python /app/start_api.py' >> /app/docker-entrypoint.sh && \
    echo 'environment=API_PORT="$API_PORT"' >> /app/docker-entrypoint.sh && \
    echo 'autostart=true' >> /app/docker-entrypoint.sh && \
    echo 'autorestart=true' >> /app/docker-entrypoint.sh && \
    echo '[program:warmer]' >> /app/docker-entrypoint.sh && \
    echo 'command=python /app/start_warmer.py' >> /app/docker-entrypoint.sh && \
    echo 'environment=WARMER_PORT="$WARMER_PORT"' >> /app/docker-entrypoint.sh && \
    echo 'autostart=true' >> /app/docker-entrypoint.sh && \
    echo 'autorestart=true' >> /app/docker-entrypoint.sh && \
    echo '[program:campaign]' >> /app/docker-entrypoint.sh && \
    echo 'command=python /app/start_campaign.py' >> /app/docker-entrypoint.sh && \
    echo 'environment=CAMPAIGN_PORT="$CAMPAIGN_PORT"' >> /app/docker-entrypoint.sh && \
    echo 'autostart=true' >> /app/docker-entrypoint.sh && \
    echo 'autorestart=true' >> /app/docker-entrypoint.sh && \
    echo 'EOF' >> /app/docker-entrypoint.sh && \
    echo 'exec /usr/bin/supervisord -c /etc/supervisor/conf.d/services.conf' >> /app/docker-entrypoint.sh

# Make scripts executable
RUN chmod +x /app/start_api.py /app/start_warmer.py /app/start_campaign.py /app/docker-entrypoint.sh

# NO EXPOSE - ports are fully dynamic!
ENTRYPOINT ["/app/docker-entrypoint.sh"]