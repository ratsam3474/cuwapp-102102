# Multi-service Dockerfile for user containers
# Runs API, Warmer, and Campaign services in one container
# ALL PORTS ARE DYNAMIC via environment variables

FROM python:3.9-slim

WORKDIR /app

# Install system dependencies (including gettext-base for envsubst)
RUN apt-get update && apt-get install -y \
    supervisor \
    curl \
    gettext-base \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy application code
COPY . .

# Create supervisor config directory
RUN mkdir -p /etc/supervisor/conf.d

# Create supervisor configuration template
# This will be populated with actual ports at runtime
RUN cat > /etc/supervisor/conf.d/services.conf.template << 'EOF'
[supervisord]
nodaemon=true
logfile=/var/log/supervisor/supervisord.log
pidfile=/var/run/supervisord.pid

[program:api]
command=python /app/start_api.py
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/api.log
stderr_logfile=/var/log/api_error.log
environment=SERVICE_TYPE="api",SERVICE_PORT="%(ENV_API_PORT)s"

[program:warmer]
command=python /app/start_warmer.py
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/warmer.log
stderr_logfile=/var/log/warmer_error.log
environment=SERVICE_TYPE="warmer",SERVICE_PORT="%(ENV_WARMER_PORT)s"

[program:campaign]
command=python /app/start_campaign.py
directory=/app
autostart=true
autorestart=true
stdout_logfile=/var/log/campaign.log
stderr_logfile=/var/log/campaign_error.log
environment=SERVICE_TYPE="campaign",SERVICE_PORT="%(ENV_CAMPAIGN_PORT)s"
EOF

# Create dynamic API starter
RUN cat > /app/start_api.py << 'EOF'
#!/usr/bin/env python3
"""
API Service - Uses dynamic port from environment
"""
import os
import sys
import uvicorn

# Get port from environment - NO DEFAULTS!
API_PORT = int(os.environ.get('API_PORT'))
if not API_PORT:
    raise ValueError("API_PORT environment variable is required")

# Import and modify main app to use our port
sys.path.insert(0, '/app')
from main import app

if __name__ == "__main__":
    print(f"Starting API service on port {API_PORT}")
    uvicorn.run(app, host="0.0.0.0", port=API_PORT)
EOF

# Create dynamic Warmer starter
RUN cat > /app/start_warmer.py << 'EOF'
#!/usr/bin/env python3
"""
Warmer Service - Uses dynamic port from environment
"""
import os
import sys
sys.path.append('/app')

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# Get port from environment - NO DEFAULTS!
WARMER_PORT = int(os.environ.get('WARMER_PORT'))
if not WARMER_PORT:
    raise ValueError("WARMER_PORT environment variable is required")

app = FastAPI(title="Warmer Service")

# Add CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Import warmer routes
from warmer.api import router as warmer_router
app.include_router(warmer_router)

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "warmer", "port": WARMER_PORT}

if __name__ == "__main__":
    print(f"Starting Warmer service on port {WARMER_PORT}")
    uvicorn.run(app, host="0.0.0.0", port=WARMER_PORT)
EOF

# Create dynamic Campaign starter
RUN cat > /app/start_campaign.py << 'EOF'
#!/usr/bin/env python3
"""
Campaign Service - Uses dynamic port from environment
"""
import os
import sys
sys.path.append('/app')

from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# Get port from environment - NO DEFAULTS!
CAMPAIGN_PORT = int(os.environ.get('CAMPAIGN_PORT'))
if not CAMPAIGN_PORT:
    raise ValueError("CAMPAIGN_PORT environment variable is required")

app = FastAPI(title="Campaign Service")

# Add CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Import campaign routes
try:
    from jobs.api import router as campaign_router
    app.include_router(campaign_router)
except ImportError:
    # Fallback routes if jobs.api doesn't exist
    @app.get("/campaigns")
    async def list_campaigns():
        return {"campaigns": [], "service": "campaign", "port": CAMPAIGN_PORT}

@app.get("/health")
async def health():
    return {"status": "healthy", "service": "campaign", "port": CAMPAIGN_PORT}

if __name__ == "__main__":
    print(f"Starting Campaign service on port {CAMPAIGN_PORT}")
    uvicorn.run(app, host="0.0.0.0", port=CAMPAIGN_PORT)
EOF

# Create entrypoint script that sets up supervisor with dynamic ports
RUN cat > /app/docker-entrypoint.sh << 'EOF'
#!/bin/bash
set -e

# Require all port environment variables
if [ -z "$API_PORT" ]; then
    echo "ERROR: API_PORT environment variable is required"
    exit 1
fi

if [ -z "$WARMER_PORT" ]; then
    echo "ERROR: WARMER_PORT environment variable is required"
    exit 1
fi

if [ -z "$CAMPAIGN_PORT" ]; then
    echo "ERROR: CAMPAIGN_PORT environment variable is required"
    exit 1
fi

echo "Starting multi-service container with:"
echo "  API_PORT=$API_PORT"
echo "  WARMER_PORT=$WARMER_PORT"
echo "  CAMPAIGN_PORT=$CAMPAIGN_PORT"

# Export for supervisor
export API_PORT
export WARMER_PORT
export CAMPAIGN_PORT

# Generate supervisor config from template
envsubst < /etc/supervisor/conf.d/services.conf.template > /etc/supervisor/conf.d/services.conf

# Start supervisor
exec /usr/bin/supervisord -c /etc/supervisor/conf.d/services.conf
EOF

# envsubst already installed above

# Make scripts executable
RUN chmod +x /app/start_api.py /app/start_warmer.py /app/start_campaign.py /app/docker-entrypoint.sh

# NO EXPOSE - ports are fully dynamic!
# Ports will be specified at runtime via environment variables

# Use the entrypoint script
ENTRYPOINT ["/app/docker-entrypoint.sh"]